#include <stdio.h>
#include <limits.h>

#define INF 99999
#define V 6
void printSolution(int dist[][V]);
void floydWarshall(int graph[][V]);
int main() {
    int graph[V][V] = { {0, 10, 5, INF, INF, INF},
                        {10, 0, 1, 4, INF, 2},
                        {5, 1, 0, 3, 6, INF},
                        {INF, 4, 3, 0, 1, INF},
                        {INF, INF, 6, 1, 0, 3},
                        {INF, 2, INF, INF, 3, 0} };
    printf("Distance matrix before link failure:\n");
    floydWarshall(graph);
    graph[1][3] = INF;
    graph[3][1] = INF;
    printf("\nDistance matrix after link failure between B and D:\n");
    floydWarshall(graph);
    return 0;
}
void floydWarshall(int graph[][V]) {
    int dist[V][V], i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
    printf("Shortest path from Router A to Router F: %d\n", dist[0][5]);
}
void printSolution(int dist[][V]) {
    printf("The following matrix shows the shortest distances between every pair of routers:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");
            else
                printf("%7d", dist[i][j]);
        }
        printf("\n");
    }
}