#include <stdio.h>
#include <math.h>

#define MAX_CITIES 10

struct City {
  int x;
  int y;
};

double distance(struct City city1, struct City city2) {
  return sqrt(pow(city2.x - city1.x, 2) + pow(city2.y - city1.y, 2));
}

// Function to swap elements in an array (used for permutation generation)
void swap(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

// Function to generate permutations (adapted from a basic approach)
void permute(int* arr, int start, int end, struct City cities[], double* min_dist, struct City* best_path) {
  if (start == end) {
    // Calculate total distance for this permutation
    double total_dist = 0;
    for (int i = 0; i < end; i++) {
      total_dist += distance(cities[arr[i]], cities[arr[i + 1]]);
    }
    total_dist += distance(cities[arr[end]], cities[0]); // Add distance back to starting city

    // Update minimum distance and best path if necessary
    if (total_dist < *min_dist) {
      *min_dist = total_dist;
      for (int i = 0; i <= end; i++) {
        best_path[i] = cities[arr[i]];
      }
    }
  } else {
    for (int i = start; i <= end; i++) {
      swap(&arr[start], &arr[i]);
      permute(arr, start + 1, end, cities, min_dist, best_path);
      swap(&arr[start], &arr[i]); // Backtrack
    }
  }
}

void tsp(struct City cities[], int n) {
  double min_dist = INFINITY;
  struct City best_path[MAX_CITIES + 1]; // Include starting city at the beginning and end

  // Generate all permutations excluding the starting city (index 0)
  int perm_arr[n - 1];
  for (int i = 1; i < n; i++) {
    perm_arr[i - 1] = i;
  }
  permute(perm_arr, 0, n - 2, cities, &min_dist, best_path);
  printf("Shortest Distance: %.8lf\n", min_dist);
  printf("Shortest Path: ");
  for (int i = 0; i <= n; i++) {
    printf("(%d, %d) ", best_path[i].x, best_path[i].y);
  }
  printf("\n");
}
int main(){
  struct City cities1[] = {{1, 2}, {4, 5}, {7, 1}, {3, 6}};
  int n1 = sizeof(cities1) / sizeof(cities1[0]);
  tsp(cities1, n1);
  struct City cities2[] = {{2, 4}, {8, 1}, {1, 7}, {6, 3}, {5, 9}};
  int n2 = sizeof(cities2) / sizeof(cities2[0]);
  tsp(cities2, n2);
  return 0;
}
